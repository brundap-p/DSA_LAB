class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

class BST:
    def __init__(self):
        self.root = None
        self.node_count = 0

    def insert(self, key):
        if self.root is None:
            self.root = Node(key)
            self.node_count += 1
        else:
            if self._insert_recursive(self.root, key):
                self.node_count += 1

    def _insert_recursive(self, root, key):
        if key == root.val:
            return False  # Duplicate
        elif key < root.val:
            if root.left is None:
                root.left = Node(key)
                return True
            else:
                return self._insert_recursive(root.left, key)
        else:
            if root.right is None:
                root.right = Node(key)
                return True
            else:
                return self._insert_recursive(root.right, key)

    def search(self, key):
        return self._search_recursive(self.root, key)

    def _search_recursive(self, root, key):
        if root is None:
            return False
        if key == root.val:
            return True
        elif key < root.val:
            return self._search_recursive(root.left, key)
        else:
            return self._search_recursive(root.right, key)

    def get_height(self):
        return self._get_height_recursive(self.root)

    def _get_height_recursive(self, node):
        if node is None:
            return -1  # Empty tree has height -1
        return 1 + max(self._get_height_recursive(node.left), self._get_height_recursive(node.right))

def main():
    bst = BST()
    while True:
        print("\nMenu:")
        print("1. Insert integers (space-separated)")
        print("2. Search for an element")
        print("3. Exit")
        choice = input("Enter your choice (1/2/3): ").strip()

        if choice == '1':
            input_str = input("Enter integers separated by space: ")
            if not input_str.strip():
                print("Empty values not allowed.")
                continue
            try:
                nums = list(map(int, input_str.strip().split()))
                for num in nums:
                    prev_count = bst.node_count
                    bst.insert(num)
                    if bst.node_count == prev_count:
                        print(f"Duplicate '{num}' not inserted.")
                print("Insertion complete.")
            except ValueError:
                print("Invalid input. Please enter integers only.")
        
        elif choice == '2':
            if bst.root is None:
                print("The tree is empty. Please insert elements first.")
                continue
            try:
                key_input = input("Enter element to search: ").strip()
                if key_input == "":
                    print("Empty search value not allowed.")
                    continue
                key = int(key_input)
                found = bst.search(key)
                print("Element found!" if found else "Element not found.")
                print(f"Total number of nodes: {bst.node_count}")
                print(f"Height of the tree: {bst.get_height()}")
            except ValueError:
                print("Please enter a valid integer.")
        
        elif choice == '3':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice.")
main()
