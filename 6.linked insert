class Node:
    """
    Represents a node in the linked list.
    Uses __slots__ for memory efficiency.
    """
    __slots__ = ('data', 'next') # Declare allowed attributes for Node instances

    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    """
    Implements a singly linked list with various operations.
    Uses __slots__ for memory efficiency.
    """
    __slots__ = ('head',) # Declare allowed attributes for LinkedList instances

    def __init__(self):
        self.head = None

    def _contains(self, data):
        """
        Helper method to check if an element already exists in the list.
        """
        current = self.head
        while current:
            if current.data == data:
                return True
            current = current.next
        return False

    def insert_at_beginning(self, data):
        """
        Inserts a new element at the beginning of the linked list.
        Prevents duplicate entries.
        """
        if self._contains(data):
            print(f"Error: Element {data} already exists in the list. Duplicate not allowed.")
            return
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
        print(f"Element {data} inserted at the beginning.")

    def insert_at_end(self, data):
        """
        Inserts a new element at the end of the linked list.
        Prevents duplicate entries.
        """
        if self._contains(data):
            print(f"Error: Element {data} already exists in the list. Duplicate not allowed.")
            return
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            print(f"Element {data} inserted at the end.")
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node
        print(f"Element {data} inserted at the end.")

    def insert_at_position(self, data, position):
        """
        Inserts a new element at a specific position in the linked list.
        Handles edge cases for position and prevents duplicates.
        """
        if self._contains(data):
            print(f"Error: Element {data} already exists in the list. Duplicate not allowed.")
            return
        if position < 0:
            print("Position cannot be less than 0.")
            return
        if position == 0:
            self.insert_at_beginning(data)
            return

        new_node = Node(data)
        current = self.head
        count = 0
        while current and count < position - 1:
            current = current.next
            count += 1

        if current is None:
            print(f"Position {position} is beyond the end of the list. Element not inserted.")
            return

        new_node.next = current.next
        current.next = new_node
        print(f"Element {data} inserted at position {position}.")

    def insert_after_node(self, data, prev_node_data):
        """
        Inserts a new element after a node with specific data.
        Prevents duplicate entries and handles cases where the previous node is not found.
        """
        if self._contains(data):
            print(f"Error: Element {data} already exists in the list. Duplicate not allowed.")
            return
        if self.head is None:
            print("List is empty. Cannot insert after a node.")
            return

        current = self.head
        found = False
        while current:
            if current.data == prev_node_data:
                found = True
                break
            current = current.next

        if not found:
            print(f"Node with data {prev_node_data} not found. Element not inserted.")
            return

        new_node = Node(data)
        new_node.next = current.next
        current.next = new_node
        print(f"Element {data} inserted after node with data {prev_node_data}.")

    def search_element(self, key):
        """
        Searches for an element in the linked list and prints its position if found.
        """
        current = self.head
        position = 0
        while current:
            if current.data == key:
                print(f"Element {key} found at position {position}.")
                return
            current = current.next
            position += 1
        print(f"Element {key} not found in the list.")

    def display_list(self):
        """
        Displays all elements in the linked list.
        """
        if self.head is None:
            print("Linked List is empty.")
            return
        current = self.head
        elements = []
        while current:
            elements.append(str(current.data))
            current = current.next
        print("Linked List: " + " ---> ".join(elements),"---> \u03c6")

def main():
    """
    Main function to run the linked list menu-driven program.
    """
    ll = LinkedList()

    while True:
        print("\n--- Linked List Menu ---")
        print("1. Insert element at beginning")
        print("2. Insert element at end")
        print("3. Insert element at a specific position")
        print("4. Insert element after a node")
        print("5. Search for an element")
        print("6. Display Linked List")
        print("7. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            try:
                data = int(input("Enter element to insert at beginning: "))
                ll.insert_at_beginning(data)
            except ValueError:
                print("Invalid input. Please enter an integer.")
        elif choice == '2':
            try:
                data = int(input("Enter element to insert at end: "))
                ll.insert_at_end(data)
            except ValueError:
                print("Invalid input. Please enter an integer.")
        elif choice == '3':
            try:
                data = int(input("Enter element to insert: "))
                position = int(input("Enter position to insert: "))
                ll.insert_at_position(data, position)
            except ValueError:
                print("Invalid input. Please enter integer.")
        elif choice == '4':
            try:
                data = int(input("Enter element to insert: "))
                prev_node_data = int(input("Enter data of the node to insert element after: "))
                ll.insert_after_node(data, prev_node_data)
            except ValueError:
                print("Invalid input. Please enter integer.")
        elif choice == '5':
            try:
                key = int(input("Enter element to search: "))
                ll.search_element(key)
            except ValueError:
                print("Invalid input. Please enter an integer.")
        elif choice == '6':
            ll.display_list()
        elif choice == '7':
            print("Exiting program.")
            break
        else:
            print("Invalid choice. Please try again.")

main()
